// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        Int     @id @default(autoincrement())
  username  String  @unique
  token     String
  is_admin  Boolean @default(false)
}

model Account {
  id              Int @id @default(autoincrement())

  password        String 
  username        String

  activity_id     Int? 
  activity        Activity? @relation(fields: [activity_id], references: [id], onDelete: SetNull)
  
  posts           Post[]
}

model Activity {
  id              Int @id @default(autoincrement())
  
  timespan        Int // time before account switch
  post_target     Int

  follow_target   Int     // number of ppl to follow in a single timespan
  follow_queue    String  // comma separated ig ids to follow

  unfollow_target Int
  unfollow_queue  String

  auto_upload     Boolean @default(false)
  last_used       DateTime @default(now())

  accounts        Account[]
  queries         Fetch[]
}

model Fetch {
  id          Int @id @default(autoincrement())
  activities  Activity[]
  
  enabled     Boolean
  timespan    Float

  page_count  Int
  page_after  String

  // configurables
  q           String? // search term 
  sub         String 
  time         String 
  sort        String  // rising | hot | best | new 
  type        String  // *.json
  limit       Int     // posts to save
  over_18     Boolean // nsfw
  page_reset  Int     // reset after x pages
}

// the stolen reddit post
model Source {
  id Int @id @default(autoincrement())

  // meta
  url           String
  name          String
  title         String
  author        String
  subreddit     String
  created_utc   Int
  // rating
  ups           Int 
  downs         Int 
  score         Int
  upvote_ratio  Float
  num_comments  Int
  // other
  file          String // processed video or image path
  archived      Boolean @default(false)
  post_hint     String

  post          Post?
}

model Post {
  id            Int @id @default(autoincrement())

  source_id     Int? @unique
  source        Source? @relation(fields: [source_id], references: [id], onDelete: SetNull)

  account_id    Int?
  account       Account? @relation(fields: [account_id], references: [id], onDelete: SetNull)

  uploaded      Boolean @default(false)
  caption       String

  created_at    DateTime @default(now())
  upload_index  Int
}